name: CI
on:
  push:
    branches:
      - master
      - develop
      - update-tests
      - 'release*'
      - 'ci-diagnose'
  pull_request:
    branches:
      - master
      - develop
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    timeout-minutes: 10
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Cache Python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-3.7-pip-${{ hashFiles('setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-3.7-pip-

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install .
          python -c "import flopy; print(f'{flopy.__version__}')"

      - name: Build package
        run: |
          python -m build
      - name: Check package
        run: |
          twine check --strict dist/*

  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    timeout-minutes: 10

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Cache Python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-3.7-pip-${{ hashFiles('setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-3.7-pip-

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Install Python dependencies
        run: |
          pip install .
          pip install ".[lint]"

      - name: Run isort
        run: |
          echo "if isort check fails update isort using"
          echo "  pip install isort --upgrade"
          echo "and run"
          echo "  isort ./flopy"
          echo "and then commit the changes."
          isort --check --diff ./flopy

      - name: Run black
        run: |
          echo "if black check fails update black using"
          echo "  pip install black --upgrade"
          echo "and run"
          echo "  black ./flopy"
          echo "and then commit the changes."
          black --check --diff ./flopy

      - name: Run flake8
        run: |
          flake8 --count --show-source --exit-zero ./flopy

      - name: Run pylint
        run: |
          pylint --jobs=2 --errors-only --exit-zero ./flopy

      - name: Check CITATION.cff
        run: |
          cffconvert --validate
          cffconvert -f apalike
          cffconvert -f bibtex

  smoke:
    name: Smoke test
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    timeout-minutes: 10

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Cache Python
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-3.7-pip-${{ hashFiles('setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-3.7-pip-

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Get branch name
        uses: nelonoel/branch-name@v1.0.1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install ".[test, optional]"

      - name: Install Modflow executables
        uses: modflowpy/install-modflow-action@v1
        with:
          path: ~/.local/bin
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run smoke tests
        working-directory: ./autotest
        run: |
          pytest -v -n=auto --smoke --durations=0 --keep-failed=.failed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload failed test outputs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: failed-smoke-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            ./autotest/.failed/**

  test:
    name: Test
    needs: smoke
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ 3.7, 3.8, 3.9, "3.10" ]
        exclude:
          # avoid shutil.copytree infinite recursion bug
          # https://github.com/python/cpython/pull/17098
          - python-version: '3.8.0'
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
          - os: macos-latest
            path: ~/Library/Caches/pip
    timeout-minutes: 45
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Cache Python
        if: runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Setup Python
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Micromamba environment
        if: runner.os == 'Windows'
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: etc/environment.yml
          cache-downloads: true
          cache-env: true

      # - name: Cache Miniconda
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/conda_pkgs_dir
      #     key: ${{ runner.os }}-${{ matrix.python-version }}-miniconda-${{ hashFiles('etc/environment.yml') }}

      # Standard python fails on windows without GDAL installation
      # Using custom bash shell ("shell: bash -l {0}") with Miniconda
      # - name: Setup Miniconda
      #   uses: conda-incubator/setup-miniconda@v2.1.1
      #   with:
      #     python-version: ${{ matrix.python-version }}
      #     channels: conda-forge
      #     auto-update-conda: true
      #     activate-environment: flopy
      #     use-only-tar-bz2: true

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install .

          if [ "$RUNNER_OS" != "Windows" ]; then
            pip install ".[test, optional]"
          fi

      - name: Install Modflow
        uses: modflowpy/install-modflow-action@v1
        with:
          path: ${{ runner.os == 'Linux' && '/home/runner/.local/bin' || runner.os == 'macOS' && 'Users/runner/.local/bin' || 'C:\Users\runneradmin\.local\bin' }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        working-directory: autotest
        run: |
          pytest -v -m="not example and not regression" -n=auto --cov=flopy --cov-report=xml --durations=0 --keep-failed=.failed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload failed test outputs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: failed-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            ./autotest/.failed/**

      - name: Print coverage
        working-directory: autotest
        run: |
          coverage report

      - name: Upload coverage
        if:
          github.repository_owner == 'modflowpy' && (github.event_name == 'push' || github.event_name == 'pull_request')
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./autotest/coverage.xml
