{% import 'macros.jinja' as macros %}
# autogenerated file, do not modify

from os import PathLike, curdir
from typing import Union

from flopy.mf6.data.mfdatautil import ArrayTemplateGenerator, ListTemplateGenerator
from flopy.mf6.mfpackage import MFPackage, MFChildPackages


class Modflow{{ name.title.title() }}(MFPackage):
    """
    {{ name.description }}

    Parameters
    ----------
    {{ macros.vars_docs(vars, start_indent=4) }}
    """

    {% for attr in cls_attrs %}
    {{ attr }}
    {%- endfor %}

    def __init__(
        self,
        {{ parent }},
        loading_package=False,
        {{ macros.vars_params(vars, init_skip, start_indent=8) }}
        filename=None,
        pname=None,
        **kwargs,
    ):
        """
        {{ name.description }}

        Parameters
        ----------
        {{ parent }} : {{ name.parent }}
            Parent_package that this package is a part of. Package is automatically
            added to parent_package when it is initialized.

        loading_package : bool
            Do not set this parameter. It is intended for debugging and internal
            processing purposes only.

        {{ macros.vars_docs(vars, start_indent=8) }}

        filename : str
            File name for this package.

        pname : str
            Package name for this package.

        parent_file : MFPackage
            Parent package file that references this package. Only needed for
            utility packages (mfutl*). For example, mfutllaktab package must have
            a mfgwflak package parent_file.
        """

        super().__init__(
            {{ parent }},
            "{{ name.r }}",
            filename,
            pname,
            loading_package,
            **kwargs
        )

        {% for statement in init_body %}
        {{ statement }}
        {%- endfor %}

        self._init_complete = True

{% if "ref" in meta and name.r != "hpc" %}
class {{ name.title.title() }}Packages(MFChildPackages):
    """
    {{ name.title.title() }}Packages is a container class for the Modflow{{ name.title.title() }} class.

    Methods
    -------
    initialize
        Initializes a new Modflow{{ name.title.title() }} package removing any sibling child
        packages attached to the same parent package. See Modflow{{ name.title.title() }} init
        documentation for definition of parameters.

    append_package
        Adds a new Modflow{{ name.title.title() }} package to the container. See Modflow{{ name.title.title() }}
        init documentation for definition of parameters.

    """

    package_abbr = "{{ name.title.lower() }}packages"

    def initialize(
        self,
        {{ macros.vars_params(vars, init_skip, start_indent=8) }}
        filename=None,
        pname=None,
    ):
        new_package = Modflow{{ name.title.title() }}(
            self._cpparent,
            {{ macros.vars_params(vars, init_skip, start_indent=12) }}
            filename=filename,
            pname=pname,
            child_builder_call=True,
        )
        self.init_package(new_package, filename)

    {% if name.r != "obs" %}
    def append_package(
        self,
        {{ macros.vars_params(vars, init_skip, start_indent=8) }}
        filename=None,
        pname=None,
    ):
        new_package = Modflow{{ name.title.title() }}(
            self._cpparent,
            {{ macros.vars_params(vars, init_skip, start_indent=12) }}
            filename=filename,
            pname=pname,
            child_builder_call=True,
        )
        self._append_package(new_package, filename)
    {% endif %}
{% endif %}
